package chapter19;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

// java 8에서 처음 도입 됨
// >> 컬렉션 데이터를 처리하는 도구

// +) 스트림의 특징
// - 일회성: 한 번 사용되면 다시 사용이 불가능, 새로운 스트림을 생성하여 사용해야함
// - 연산의 분류: 스트림 연산은 중간, 최종 연산으로 나뉨
//     >> 중간연산: map, filter, sorted 등
//            : 데이터를 가공하지만 실제로 연산은 최종 연산의 호출 시 수행
//     >> 최종연산: collect, forEach, reduce 등
//            : 스트림의 결과를 반환하고 스트림을 종료

/*
   스트림 생성(사용) 절차
   1. 배열 생성 >> 스트림으로 변환
   2. List 생성 >> 스트림으로 변환
   3. generate 메서드 >> 스트림 생성
   4. 범위 지정 >> 스트림 생성
   5. 빌더 >> 스트림 생성
   
   == 중간(가공) 절차 ==
   1. map(Function)
   2. filter(Predicate)
   3. sorted(Comparator)
   
   == 최종(결과) 절차 ==
   1. collect >> stream을 list로 변환
   2. forEach >> 반복차
*/

public class StreamMain {
   public static void main(String[] args) {
      // 1. 배열로부터 스트림 생성
      Stream<Integer> st1 = Arrays.stream(new Integer[] {1, 2, 3, 4, 5});
      
      // map (중간 연산): 각 요소를 주어진 함수에 따라 변환
      List<Integer> st1Stream = st1.map(n -> n * 2)
            // peek(중간연산): 중간에 각 요소를 소비, 디버깅 시 유용하게 사용
            .peek(n -> System.out.print(n))
            // collection(최종 연산): 스트림 데이터를 다른 컬렉션이나 데이터 형식으로 변환
            // Collectors.toList()로 리스트 변환을 가장 많이 사용
            .collect(Collectors.toList());
      System.out.println("배열로부터 스트림 생성");
      st1Stream.forEach(n -> System.out.println("n: " + n ));
      
      // 2. 컬렉션(List)로 부터 스트림 생성
      List<Integer> numberList = Arrays.asList(20, 30, 40, 50, 10);
      Stream<Integer> numberStream = numberList.stream();
      List<Integer> filteredList = numberStream
            .map(n -> n / 2)
            .filter(n -> n % 2 == 0)
            .collect(Collectors.toList());
      
      System.out.println("컬렉션(List)로 부터 스트림 생성");
      filteredList.forEach(n -> System.out.println("n :" + n));
      List<Integer> sortedList = numberList.stream()
            .sorted((n1, n2) -> n1 - n2)
            .collect(Collectors.toList());
      System.out.println(sortedList); //[10, 20, 30, 40, 50]
      
      // 3. Stream.generate() 메서드로 스트림 생성
      // 무한 스트림 생성 가능
      // >> 제한 조건을 주어 사용 가능
      Stream<Double> randomStream = Stream.generate(Math::random).limit(5);
      
      // 4. 범위 지정 스트림 생성
      // : 특정 범위를 지정하여 스트림 생성
      IntStream reangeStream = IntStream.range(1, 10);
      
      // 5. 빌더를 이용한 스트림 생성
      // : 빌더 패턴을 사용하여 스트림 생성
      Stream<String> nameString = Stream.<String>builder()
            .add("이승아")
            .add("이도경")
            .add("윤대휘")
            .add("김소빈")
            .add("정규민")
            .build();
      
//      nameString.sorted().forEach(name -> System.out.println(name));
      nameString.sorted((n1, n2) -> String.CASE_INSENSITIVE_ORDER.compare(n1, n2)) // 비교하여 대문자로 나열
      .forEach(name -> System.out.println(name));
      
      // ==================================== //
      // Phon 클래스를 사용한 리스트 생성 + 스트림 API 사용
      
      // -- 리스트를 한 번에 생성하는 메서드 --
      // cf) Arrays.asList(1, 2, 3, 4, 5)
      // cf) Arrays.asList()
      // >> 원소 추가 삭제 X, set 사용 O
      // +) set 메서드: set(a, b) - a번째 인텍스에 b의 값을 할당
      List<Number> asList = Arrays.asList(1, 2, 3);
      
      // cf) List.of()
      // : 자바9 지원
      // >> List 인터페이스의 디폴트 메서드인 정적 팩토리 메서드
      // >> 원소 추가 삭제 X, set 사용 X
      List<Number> listOf = List.of(1, 2, 3);
     
      // asList.add(1); Error
      // listOf.add(1); Error
      
      asList.set(0, 3);
      System.out.println(asList); // [3, 2, 3]
      // listOf.set(0, 3); Error
      
      
      List<Phone> phoneList = List.of(
    	  Phone.builder().number(1).model("아이폰 16").build(),
    	  Phone.builder().number(1).model("아이폰 17").build(),
    	  Phone.builder().number(1).model("아이폰 18").build(),
    	  Phone.builder().number(1).model("아이폰 19").build()
      );
      
      phoneList.stream()
      	.map(phone -> phone.builder()
      		.number(phone.getNumber() * 2)
      		.model(phone.getModel())
      		.build())
      	.forEach(phone -> System.out.println(phone));
      
      		
      		
      		
      
      
      
   }
}
