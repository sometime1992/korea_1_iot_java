package chapter18;

// 빌더(Builder)
// : 복잡한 객체 생성을 단순화하는 생성 패턴
// - 객체의 생성자 인수가 많을 때 가독성이 떨어지는 문재를 보완
// - 체이닝 방식을 사용하여 가독성 있고 유연한 객체 생성

// cf) 디자인 패턴
// : 소프트웨어 공학에서 자주 발생하는 문제에 대한 재사용 가능한 해결책
// >> 생성, 구조, 행위 패턴
// >> 빌더 패턴은 '생성'패턴에 포함

// 1. 빌더 패턴의 구조(구현 단계)

// 1) Builder 클래스 생성
// : 객체 생성을 담당하는 "내부" 클래스

// 2) 필수 속성 설정
// : 생성자를 통한 필수 속성을 설정

// 3) 선택적 속성 설정
// : 체이닝 방식으로 선택적 속성을 설절할 수 있는 메서드 추가

// 4) build 메서드
// : 최종적으로 객체를 반환하는 메서드

// 2. 빌더 패턴의 특징
// - 가독성 & 유연성 확장
// - 불변 객체 생성 가능
// : 생성된 객체는 변경할 수 없는 객체로 안정성을 보장 받음

// === 제품 클래스 ==
class Product {
	String name; // 제품명
	int price; // 제품 가격
	String description; // 제품 설명
	String manufacture; // 제조사
	
	// 외부에서 직접적인 생성자 호출이 불가!
//	private Product() {
//		
//		
//	}
	
	// 데이터의 값을 할당하는 Setter
	public void setName(String name) {
		this.name = name;				
	}
	
	// 데이터의 값을 호출하는 Getter
	public String getName() {
		return name;
	}
	
}

public class Builder01 {
	public static void main(String[] args) {
		// 빈 제품(Product) 객체를 인스턴스화
		Product product1 = new Product();
		product1.setName("아이폰 16");
		System.out.println(product1.getName()); // 아이폰 16

		
		
	}
}
