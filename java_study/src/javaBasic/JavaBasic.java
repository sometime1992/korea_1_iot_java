package javaBasic;

public class JavaBasic {
	
//	- public: 어디서든 접근이 가능한 접근제한자
	
//	- protected: 같은 패키지 안이나 하위 클래스에서 접근 가능한 접근제한자
	
//	- default: 같은 패키지 안에서만 접근 가능한 접근제한자(명시하지 않으면 default)
	
//	- private: 해당 클래스 안에서만 접근이 가능한 접근제한자
	
//	- static 변수: 모든 인스턴스가 동일한 값을 가지게한다.(모든 인스턴스에 대해 정적)
	
//	- static 메서드: 인스턴스 생성 없이 호출이 가능하다.
	
//	- final 변수: 한 번 값을 초기화하면 변경할 수 없다.
	
//	- final 메서드: 오버라이딩을 못한다
	
//	- final 클래스: 상속을 못한다
	
//	- abstract 클래스: (추후에 해야할 일)추상 클래스이며 한개 이상의 추상 메서드를 가져야하고 자식 클래스에서 해당 메서드를 반드시 구현해야한다.(인스턴스 생성이 불가능한 클래스)
	
//	- abstract 메서드: 메서드 선언부만 생성하고 구현부는 생성하지 않는다.
	
//	- interface: 구체적인 기능이 없고 객체의 동작만 정의하는 틀? 기본적으로 모든 메서드가 추상 메서드이다.
	
//	- abstract class: 추상 클래스이며 한개 이상의 추상 메서드를 가져야하고 자식 클래스에서 해당 메서드를 반드시 구현해야한다.(인스턴스 생성이 불가능한 클래스)
	
//	- extends: 다른 클래스를 상속할 때 사용한다.
	
//	- implements: 인터페이스를 정의하고 그 인터페이를 다른 클래스에서 정의할 때 implemnts를 사용한다.
	
//	- this: 현재 객체?인스턴스?를 가르킨다.
	
//	- super: 부모 클래스의 메서드나 생성자에 접근할 때? 사용한다.
	
//	- 오버로딩: 같은 이름의 메서드를 타입이 다른 매개변수나 다른 개수로 여러개 정의하는 것
	
//	- 오버라이딩: 부모 클래스를 상속받아서 부모 클래스의 메서드를 재정의 하는 것
	
//	- try: 예외가 발생할 수 있는 코드를 작성한다.
	
//	- catch: try에서 발생한 예외를 처리한다.
	
//	- finally: 예외 발생과 관계없이 항상 실행된다.
	
//	(***대부분 이론적으로는 이해하지만 언제 어느 상황에 맞게 써야할지 정확히 잘 못르겠습니다***)
}
